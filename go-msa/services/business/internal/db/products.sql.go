// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: products.db

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const CreateProduct = `-- name: CreateProduct :one
INSERT INTO products (name, description, price, stock)
VALUES ($1, $2, $3, $4)
RETURNING id, name, description, price, stock, created_at, updated_at
`

type CreateProductParams struct {
	Name        string         `db:"name" json:"name"`
	Description pgtype.Text    `db:"description" json:"description"`
	Price       pgtype.Numeric `db:"price" json:"price"`
	Stock       int32          `db:"stock" json:"stock"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (*Product, error) {
	row := q.db.QueryRow(ctx, CreateProduct,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Stock,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const DeleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeleteProduct, id)
	return err
}

const GetProduct = `-- name: GetProduct :one
SELECT id, name, description, price, stock, created_at, updated_at
FROM products
WHERE id = $1
`

func (q *Queries) GetProduct(ctx context.Context, id uuid.UUID) (*Product, error) {
	row := q.db.QueryRow(ctx, GetProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetProductsByPriceRange = `-- name: GetProductsByPriceRange :many
SELECT id, name, description, price, stock, created_at, updated_at
FROM products
WHERE price BETWEEN $1 AND $2
ORDER BY price ASC
`

type GetProductsByPriceRangeParams struct {
	Price   pgtype.Numeric `db:"price" json:"price"`
	Price_2 pgtype.Numeric `db:"price_2" json:"price_2"`
}

func (q *Queries) GetProductsByPriceRange(ctx context.Context, arg GetProductsByPriceRangeParams) ([]*Product, error) {
	rows, err := q.db.Query(ctx, GetProductsByPriceRange, arg.Price, arg.Price_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Stock,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListProducts = `-- name: ListProducts :many
SELECT id, name, description, price, stock, created_at, updated_at
FROM products
ORDER BY created_at DESC
`

func (q *Queries) ListProducts(ctx context.Context) ([]*Product, error) {
	rows, err := q.db.Query(ctx, ListProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Stock,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateProduct = `-- name: UpdateProduct :one
UPDATE products
SET name = $2, description = $3, price = $4, stock = $5
WHERE id = $1
RETURNING id, name, description, price, stock, created_at, updated_at
`

type UpdateProductParams struct {
	ID          uuid.UUID      `db:"id" json:"id"`
	Name        string         `db:"name" json:"name"`
	Description pgtype.Text    `db:"description" json:"description"`
	Price       pgtype.Numeric `db:"price" json:"price"`
	Stock       int32          `db:"stock" json:"stock"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (*Product, error) {
	row := q.db.QueryRow(ctx, UpdateProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Stock,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const UpdateProductStock = `-- name: UpdateProductStock :one
UPDATE products
SET stock = $2
WHERE id = $1
RETURNING id, name, description, price, stock, created_at, updated_at
`

type UpdateProductStockParams struct {
	ID    uuid.UUID `db:"id" json:"id"`
	Stock int32     `db:"stock" json:"stock"`
}

func (q *Queries) UpdateProductStock(ctx context.Context, arg UpdateProductStockParams) (*Product, error) {
	row := q.db.QueryRow(ctx, UpdateProductStock, arg.ID, arg.Stock)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
